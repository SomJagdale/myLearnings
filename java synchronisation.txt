Option 1
1. Synchronized Method :
	If we use the Synchronized keywords in any method then that method is Synchronized Method. 
	It is used to lock an object for any shared resources. 
	The object gets the lock when the synchronized method is called. 
	The lock won’t be released until the thread completes its function.

		public synchronized int addToProfileExpiryHash (SubscriberExpiryProfile profile) {
			m_hash.add(profile); // m_hash(HashMap) is shared object
			m_timeSlot.add(); // m_timeSlot(ArrayList) is shared object
		}

2. Synchronized block :
	 Suppose you don’t want to synchronize the entire method, you want to synchronize few lines
	 of code in the method, then a synchronized block helps to synchronize those few lines of code. 
	 It will take the object as a parameter. It will work the same as Synchronized Method. 
	 In the case of synchronized method lock accessed is on the method but in the case of 
	 synchronized block lock accessed is on the object.
	 
		class ProfileMonitor{  
		void addToProfileExpiryHash(SubscriberExpiryProfile profile){ 

			synchronized(this){ //synchronized block
			 m_hash.add(profile); // m_hash(HashMap) is shared object
			 m_timeSlot.add(); // m_timeSlot(ArrayList) is shared object
			 }  
		 }  
		}  

3. Static Synchronization :
	1. In java, every object has a single lock (monitor) associated with it. The thread which is entering 
	into synchronized method or synchronized block will get that lock, all other threads which are remaining 
	to use the shared resources have to wait for the completion of the first thread and release of the lock.

	2. Suppose in the case of where we have more than one object, in this case, two separate threads will 
	acquire the locks and enter into a synchronized block or synchronized method with a separate lock 
	for each object at the same time. To avoid this, we will use static synchronization.

	In this, we will place synchronized keywords before the static method. In static synchronization, 
	lock access is on the class not on object and Method.
		synchronized static int addToProfileExpiryHash (SubscriberExpiryProfile profile) {
			 m_hash.add(profile); // m_hash(HashMap) is shared object
			 m_timeSlot.add(); // m_timeSlot(ArrayList) is shared object
			}
	
	

Option 2	
Alterntive to above synchronized keyword is Atomic Access
	In programming, an atomic action is one that effectively happens all at once. 
	An atomic action cannot stop in the middle: it either happens completely, or it doesn't happen at all. 
	No side effects of an atomic action are visible until the action is complete.

	ConcurrentHashMap <long, SubscriberExpiryProfile> map = new ConcurrentHashMap <>();
    ConcurrentLinkedQueue<> list = new ConcurrentLinkedQueue<>();

When to use - we should choose ConcurrentHashMap for performance-critical applications where there 
             are far more write operations than there are read operations.			 
	
Option 3 
The synchronizedMap() method of java.util.Collections class is used to return a synchronized (thread-safe) 
map backed by the specified map. In order to guarantee serial access, it is critical that all access to the 
backing map is accomplished through the returned map.

	// create a synchronized map (synmap)
            Map<Long, SubscriberExpiryProfile> synmap = Collections.synchronizedMap(m_hash);
	// create a synchronized list
            List<Integer> synlist = Collections.synchronizedList(m_timeSlot);

When to Use - We should favor Collections.synchronizedMap() when data consistency is of utmost importance

Option 4
    It is similar to HashMap, but is synchronized.
	HashTable <long, SubscriberExpiryProfile> map = new HashTable<>();
    ConcurrentLinkedQueue<> list = new ConcurrentLinkedQueue<>();
	
	
Analysis - 
We have need to udpate both ProfileHash and LinkedList(TimerSlot) in a single automic operation.
Option 2, 3 and 4 provide thread safeness on individual object only(not as combined).

So, we are going with Option 1, it provides thread safe operations on both hash and linked list at same time.
And we are considering Option 1.2 ie 'Synchronization block' because it is fast compared to the other two(Synchronized method and Static Synchronization).



