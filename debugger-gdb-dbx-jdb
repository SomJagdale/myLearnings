
GDB                     DBX                       for more information
===                     ===                       ====================

break <line>            stop at <line>            `help stop'
break <func>            stop in <func>            `help stop'
break *<addr>           stopi at <addr>           `help stopi'
break ... if <expr>     stop ... -if <expr>       `help event specification'
cond <n>                stop ... -if <expr>       `help event specification'
tbreak                  stop ... -temp            `help event specification'
watch <expr>            stop <expr>  [slow]       `help event specification'
watch <var>             stop modify &<var> [fast] `help event modify'
catch <x>               intercept <x>             `help intercept'
info break              status                    `help status'
info watch              status                    `help status'
clear                   clear                     `help clear'
clear <fun>             delete <n>                `help delete'
delete                  delete all                `help delete'
disable                 handler -disable all      `help handler'
disable <n>             handler -disable <n>      `help handler'
enable                  handler -enable all       `help handler'
enable <n>              handler -enable <n>       `help handler'
ignore <n> <cnt>        handler -count <n> <cnt>  `help handler'
commands <n>            when ... { <cmds>; }      `help when'

backtrace <n>           where <n>                 `help where'
frame <n>               frame <n>                 `help frame'
info reg <reg>          print $<reg>              `help registers'

finish                  step up                   `help step'
signal <num>            cont sig <num>            `help cont'
jump <line>             cont at <line>            `help cont'
set <var>=<expr>        assign <var>=<expr>       `help assign'

x/<fmt> <addr>          x <addr>/<fmt>            `help examine'
disassem <addr>         dis <addr>                `help dis'

shell <cmd>             sh <cmd> [if needed]      `help sh'

info func <regex>       funcs <regexp>            `help funcs'
ptype <type>            whatis -t <type>          `help whatis'

define <cmd>            function <cmd>            `help ksh syntax'

handle <sig>            stop sig <sig>            `help event specification'
info signals            status; catch             `help status', `help catch'

attach <pid>            debug - <pid>             `help debug'
attach <pid>            debug <a.out> <pid>       `help debug'
file <file>             [unnecessary]
exec <file>             debug <file>              `help debug'
core <file>             debug <a.out> <file>      `help debug'

set editing on          set -o emacs              `help editing'
set language <x>        language <x>              `help language'
set prompt <x>          PS1=<x>                   `help ksh PS1'
set history size <x>    HISTSIZE=<x>              `help ksh HISTSIZE'

set print object on     dbxenv output_dynamic_type on `help c++ dynamic'

show commands           history                   `help history'
dir <name>              pathmap <name>            `help pathmap'
show dir                pathmap                   `help pathmap'
info line <n>           listi <n>                 `help listi'
info source             file                      `help file'
info sources            files; modules            `help files', `help modules'
forw <regex>            search <regex>            `help search'
rev <regex>             bsearch <regex>           `help bsearch'


GDB Day to Day Command I use

g++ options
-g - turn on debugging (so GDB gives more friendly output)
-Wall - turns on most warnings.
-O or -O2 - turn on optimizations.
-o <name> - name of the output file.
-c - output an object file (.o)
-I<include path> - specify an include directory.
-L<library path> - specify a lib directory.


Important debugging tools
gdb/dbx
valgrind - memory leak detection
addresssanitizer - detects buffer overflows and dangling pointers


/usr/bin/gdb networktr core.15574


gdb networktr
gdb break CSubscriberStateManager.cpp:123
gdb -c MyTR.cfg

gdb backtrace
gdb list
gdb next 
gdb event
gdb watchpoint 
gdb print 
gdb step
gdb continue 

core dump analysis
gdb backtrace 
gdb frame #frame_number
gdb threads
gdb thread #thread_number



stack trace of gdb core analysis 
check for wait or sleep or select in thread stack trace if either one of them is present then thread is normal one
for example 
Thread 4 (Thread 0x7f3023fff700 (LWP 29159)):
#0  0x00000035672e0263 in select () from /lib64/libc.so.6
#1  0x00000000014a0409 in select (handle=4, timeout=0x7f3023ffed70, read_ready=<value optimized out>, write_ready=<value optimized out>, 
    exception_ready=<value optimized out>) at /home/roamware/amit/ACE_wrappers64/ace/OS_NS_sys_select.inl:45
#2  ACE::handle_ready (handle=4, timeout=0x7f3023ffed70, read_ready=<value optimized out>, write_ready=<value optimized out>, exception_ready=<value optimized out>)
    at ACE.cpp:2225
#3  0x00000000011ffc1b in ACE::handle_read_ready (handle=4, timeout=0x7f3023ffed70) at /opt/ACE_wrappers64/ace/ACE.inl:248
#4  0x00000000011fc1a8 in CSNMPAgent2::OnRun (this=0x54dbfd0) at /u01/rel/64bit/NTR-7.0-R201104/Roamware/platform/rfc/6.0/cpp/source/SNMPAgent2.cpp:1324
#5  0x00000000011db405 in CRoamwareThread::RunThread (this=0x54dbfd0) at /u01/rel/64bit/NTR-7.0-R201104/Roamware/platform/rfc/6.0/cpp/source/RoamwareThread.cpp:36
#6  0x00000000011db3a2 in CRoamwareThread::ThreadEntry (arg=0x54dbfd0) at /u01/rel/64bit/NTR-7.0-R201104/Roamware/platform/rfc/6.0/cpp/source/RoamwareThread.cpp:29
#7  0x0000003567607851 in start_thread () from /lib64/libpthread.so.0
#8  0x00000035672e767d in clone () from /lib64/libc.so.6



(dbx) print *&(*newProfile)->hnwid
(*newProfile)->hnwid = 12
(dbx) print *(*&(*newProfile)->visitedNwVLRList)
*(*newProfile)->visitedNwVLRList = {
    buf  = "61-131-131-0002+diamproxy.mmec18.mme-N-3-1022-0-2|"
    next = (nil)
}


dbx: you cant set breakpoint in dynamic lib source file. In run time you have to make sure .so lib is loaded then you can apply it 


dbx bin
(dbx) run -c tr.cfg
(dbx) stop at lno/funname/fileandlineno
(dbx) next
(dbx) next lineno 
(dbx) cont
(dbx) cont at lineno
(dbx) list
(dbx) programname processid
(dbx) cont -sig cont

(dbx) attach process_id
(dbx) detach

(dbx) assign speed = 90
(dbx) assign speed = 180; cont at 124;

(dbx) when at 123 { assign speed = 180; cont at 124;}
(dbx) call change_glyph(1,3)
(dbx) file
(dbx) file filename
(dbx) file filename; list lineno
(dbx) func functionname
(dbx) func block::block
(dbx) scope
(dbx) lineno
(dbx) list
(dbx) list functionname
(dbx) func
(dbx) class
(dbx) file
(dbx) loadobj
(dbx) list functionname
(dbx) print `item
(dbx) print i
(dbx) whatis identifier
(dbx) whatis block::functionname
(dbx) whatis -t typeorclassname
(dbx) whatis -t -r classname

(dbx) stop at filename:lineno
(dbx) stop in functionname
(dbx) stop in foo(int)
(dbx) stop access mode address-expression [, byte-size-expression]
(dbx) stop access r 0x4762
(dbx) stop access wb &speed
(dbx) stop change variable
(dbx) stop cond condition
(dbx) stop in foo -if a>5
(dbx) stop cond a>5
(dbx) delete 3 5

where
where -f frameno
up callstacklevenumber
down callstacklevenumber



analysing core file ==
dbx binary core 
where 
frame 
threads
threads apply bt all

debugging code 
dbx binary
stop at filename:line_no -- add checkpoint 
run -x MyTR.cfg -- run application,it should be build with option -g 
cont -- to go next checkpoint 
next -- go to next line
step -- step into the function body 
print _variable 


dbx bin core
print -L *event

